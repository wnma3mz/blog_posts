---
title: 自动批量关注微信公众号（非逆向）
date: 2020-04-11 10:39:23
tags: []
categories: [自动化]
---

自动化关注大量微信公众号

<!-- more -->

有时候会因为各种原因需要去关注大量的微信公众号，而关于这方面还没有找到比较完整的解决方案。主要思路分类微信逆向和键鼠控制。本人太菜逆向不来，所以本文采用后者来实现（含完整代码及思路）。注：需要使用`pyautogui`这个第三方库来自动控制键盘鼠标。一般搭配[记一次微信公众号爬虫的经历（微信文章阅读点赞的获取）](https://blog.csdn.net/wnma3mz/article/details/78570580)使用。可承接相关业务，联系方式见文末。

由于PC端录制视频较麻烦，故放出安卓端演示视频：

![](https://raw.githubusercontent.com/wnma3mz/blog_posts/master/imgs/adb/20200411142826290.gif)
终端输出
![](https://raw.githubusercontent.com/wnma3mz/blog_posts/master/imgs/adb/20200411142944131.png)

## 步骤概述

目的是根据大量公众号的名称来进行关注这个操纵。目前实现了PC端微信关注的操作，后续视情况放出安卓手机端的自动化步骤。

1. 基于微信公众号平台，根据公众号名称得到公众号的`__biz`。
2. 基于微信客户端，根据`__biz`来点击关注。

## 详细步骤

第一步获取`__biz`，网上大部分方法都是基于微信客户端手动进入公众号来获取`__biz`，又或者根据公众号发表的文章来获取。但矛盾的点在于，本身是没有关注这些公众号的前提下，要获取这些是比较麻烦的。就变成了一个先有鸡和先有蛋的问题。本文使用微信公众号平台来实现，可以很好的避免整这个问题。

在第一步获取完所有公众号的`__biz`之后，根据`http://mp.weixin.qq.com/mp/getmasssendmsg?__biz={}#wechat_redirect`网上提供的链接，将`__biz`填进去，在微信客户端打开该链接便可进入关注页面进行关注。所以这部分需要用Python控制键鼠。注：在运行时，需要切换至微信来点击，这里为了方便推荐最大化微信操作。

### 参数说明

- `cookie`和`token`的获取方式可以见我的另一篇文章 [记一次微信公众号爬虫的经历](https://blog.csdn.net/wnma3mz/article/details/78570580) 。
- `nickname_lst`是需要关注公众号的名称，可以提前写入文件来读取
- `url_location`是每次发送链接后的大概位置。见下图红框标记位置，获取红框标记位置内的坐标，方便点击即可。
![](https://raw.githubusercontent.com/wnma3mz/blog_posts/master/imgs/adb/20200411110402959.png)
- `img_path`是关注按钮的图片在本地保存的位置。见下图红框标记微信。因为`关注`按钮位置不确定，所以这里需要用图片的方式来确定此位置的坐标。这里我的方法是把下图中红框范围的截图，保存至本地，`img_path`为图片所处位置。
![](https://raw.githubusercontent.com/wnma3mz/blog_posts/master/imgs/adb/20200411110413861.png)

详细代码：

```python
# coding:  utf-8
# ArticlesUrls.py：微信公众号获取__biz
import os

import requests
from requests.cookies import cookielib


class ArticlesUrls(object):
    """
    获取需要爬取的微信公众号的推文链接
    """

    def __init__(self, username=None, password=None, cookie=None, token=None):
        """
        初始化参数
        Parameters
        ----------
        username: str
            用户账号
        password: str
            用户密码
        nickname : str or unicode
            需要爬取公众号名称
        token : str
            登录微信公众号平台之后获取的token
        cookie : str
            登录微信公众号平台之后获取的cookie

        Returns
        -------
            None
        """
        self.s = requests.session()
        self.headers = {
            "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36"
        }
        self.params = {
            "lang": "zh_CN",
            "f": "json",
        }

        # 手动输入cookie和token登录
        if (cookie != None) and (token != None):
            self.__verify_str(cookie, "cookie")
            self.__verify_str(token, "token")
            self.headers["Cookie"] = cookie
            self.params["token"] = token
        # 扫描二维码登录
        elif (username != None) and (password != None):
            self.__verify_str(username, "username")
            self.__verify_str(password, "password")
            # 暂不支持cookie缓存
            self.__startlogin_official(username, password)
        else:
            print("please check your paramse")
            raise SystemError

    def __verify_str(self, input_string, param_name):
        """
        验证输入是否为字符串
        Parameters
        ----------
        input_string: str
            输入
        param_name: str
            需要验证的参数名
        Returns
        ----------
            None
        """
        if not isinstance(input_string, str):
            raise TypeError("{} must be an instance of str".format(param_name))
            
    def official_info(self, nickname, begin=0, count=5):
        """
        获取公众号的一些信息
        Parameters
        ----------
        begin: str or int
            起始爬取的页数
        count: str or int
            每次爬取的数量，1-5

        Returns
        -------
        json:
            公众号的一些信息
            {
              'alias': 公众号别名,
              'fakeid': 公众号唯一id,
              'nickname': 公众号名称,
              'round_head_img': 公众号头像的url,
              'service_type': 1公众号性质
            }
        """
        self.__verify_str(nickname, "nickname")
        # 搜索公众号的url
        search_url = "https://mp.weixin.qq.com/cgi-bin/searchbiz"

        # 增加/更改请求参数
        params = {
            "query": nickname,
            "count": str(count),
            "action": "search_biz",
            "ajax": "1",
            "begin": str(begin)
        }
        self.params.update(params)

        try:
            # 返回与输入公众号名称最接近的公众号信息
            official = self.s.get(
                search_url, headers=self.headers, params=self.params)
            return official.json()["list"][0]
        except Exception:
            raise Exception(u"公众号名称错误或cookie、token错误，请重新输入")

```

```python
# coding: utf-8
import os
from pprint import pprint
from ArticlesUrls import ArticlesUrls

import pyautogui
import time

if __name__ == "__main__":
    # 一般建议第一步和第二步分开处理，这里为了方便所以放在一个文件
    # 第一步，模拟登录微信公众号平台，获取微信公众号的__biz
    # cookie, token 见微信爬虫文章获取
    cookie = yourcookie 
    token = yourtoken
    nickname_lst = nickname_lst  # 需要关注的微信公众号名称

    query = "query"
    test = ArticlesUrls(cookie=cookie, token=token)

    follow_url = 'http://mp.weixin.qq.com/mp/getmasssendmsg?__biz={}#wechat_redirect\n'
    follow_url_lst = []
    for nickname in nickname_lst:
        officical_info = test.official_info(nickname)
        biz = officical_info['fakeid']
        follow_url_lst.append(follow_url.format(biz))
        
        
    # 第二步，在微信聊天界面来进行自动化关注。这里在运行程序后需立即切换至微信聊天界面
    url_location = x, y # 每次发送完链接之后，聊天界面中url的大致位置。
    img_path = img_path # “关注”按钮的图片位置。

    for url in follow_url_lst:
        # 输入url并发送
        pyautogui.typewrite(url, 0)
        pyautogui.typewrite(['enter'], 0.25)
        # 点击需要关注的url
        pyautogui.moveTo(url_location, duration=0.25)
        pyautogui.click(button='left')
        # 等待页面加载
        time.sleep(1)
        # 在整个屏幕中找到`关注`按钮的位置
        pos = pyautogui.locateOnScreen(img_path)
        # 如果未找到，可能是已经关注公众号，屏幕中无关注按钮；或者是图片跟实际有明显差距导致程序找不到
        if pos is not None:
            pyautogui.click(pos.left, pos.top, button='left', duration=0.5)
        # 点击完成后，等1s响应。再点击微信其他位置来进行发送下一个url，这个位置需要手动调整
        time.sleep(1)
        pyautogui.click(1800, 1000, button='left', duration=0.5)
```
